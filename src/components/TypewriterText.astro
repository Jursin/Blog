---
import { siteConfig } from "../config";  // 假设你的siteConfig在这里

export interface Props {
    enabled?: boolean;  // 控制是否开启Hitokoto功能
}

const { 
    enabled = true,
} = Astro.props;

// 从siteConfig获取打字机参数
const speed = siteConfig.banner.homeText.typewriter.speed;
const deleteSpeed = siteConfig.banner.homeText.typewriter.deleteSpeed;
const pauseTime = siteConfig.banner.homeText.typewriter.pauseTime;
---

<span 
    class={`hitokoto-typewriter`} 
    data-enabled={enabled}
    data-speed={speed}
    data-delete-speed={deleteSpeed}
    data-pause-time={pauseTime}
></span>

<script>
class HitokotoTypewriter {
    private element: HTMLElement;
    private speed: number;
    private deleteSpeed: number;
    private pauseTime: number;
    private currentIndex: number = 0;
    private isDeleting: boolean = false;
    private timeoutId: number | null = null;
    private enabled: boolean;
    private currentText: string = '';

    constructor(element: HTMLElement) {
        this.element = element;
        this.enabled = element.dataset.enabled === 'true';
        this.speed = parseInt(element.dataset.speed || '100');
        this.deleteSpeed = parseInt(element.dataset.deleteSpeed || '50');
        this.pauseTime = parseInt(element.dataset.pauseTime || '2000');

        if (this.enabled) {
            this.fetchHitokoto().then(() => {
                this.start();
            });
        } else {
            this.element.textContent = '';
        }
    }

    private async fetchHitokoto(): Promise<void> {
        try {
            const response = await fetch("https://international.v1.hitokoto.cn/?c=d&c=h&c=i");
            const data = await response.json();
            this.currentText = data.hitokoto;
            // 如果需要可以设置链接
            // const link = document.createElement('a');
            // link.href = `https://hitokoto.cn/?uuid=${data.uuid}`;
            // link.textContent = this.currentText;
            // this.element.appendChild(link);
        } catch (error) {
            console.error('Failed to fetch Hitokoto:', error);
            this.currentText = ':D 获取一言失败';
        }
    }

    private start() {
        if (!this.currentText) return;
        this.type();
    }

    private type() {
        if (this.isDeleting) {
            if (this.currentIndex > 0) {
                this.currentIndex--;
                this.element.textContent = this.currentText.substring(0, this.currentIndex);
                this.timeoutId = window.setTimeout(() => this.type(), this.deleteSpeed);
            } else {
                this.isDeleting = false;
                this.fetchHitokoto().then(() => {
                    this.timeoutId = window.setTimeout(() => this.type(), this.speed);
                });
            }
        } else {
            if (this.currentIndex < this.currentText.length) {
                this.currentIndex++;
                this.element.textContent = this.currentText.substring(0, this.currentIndex);
                this.timeoutId = window.setTimeout(() => this.type(), this.speed);
            } else {
                this.isDeleting = true;
                this.timeoutId = window.setTimeout(() => this.type(), this.pauseTime);
            }
        }
    }

    public destroy() {
        if (this.timeoutId) {
            clearTimeout(this.timeoutId);
        }
    }
}

// 初始化
document.addEventListener('DOMContentLoaded', () => {
    const elements = document.querySelectorAll('.hitokoto-typewriter');
    elements.forEach((element) => {
        new HitokotoTypewriter(element as HTMLElement);
    });
});

// 支持页面切换时重新初始化
document.addEventListener('swup:contentReplaced', () => {
    const elements = document.querySelectorAll('.hitokoto-typewriter');
    elements.forEach((element) => {
        new HitokotoTypewriter(element as HTMLElement);
    });
});
</script>

<style>
.hitokoto-typewriter {
    position: relative;
}

.hitokoto-typewriter::after {
    content: '|';
    animation: blink 1s infinite;
    margin-left: 2px;
}

@keyframes blink {
    0%, 50% {
        opacity: 1;
    }
    51%, 100% {
        opacity: 0;
    }
}
</style>